// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Location implements flatbuffers.IUnpackableObject<LocationT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Location {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLocation(bb:flatbuffers.ByteBuffer, obj?:Location):Location {
  return (obj || new Location()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLocation(bb:flatbuffers.ByteBuffer, obj?:Location):Location {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Location()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

latitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

longitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startLocation(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLatitude(builder:flatbuffers.Builder, latitude:number) {
  builder.addFieldFloat64(0, latitude, 0.0);
}

static addLongitude(builder:flatbuffers.Builder, longitude:number) {
  builder.addFieldFloat64(1, longitude, 0.0);
}

static endLocation(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLocation(builder:flatbuffers.Builder, latitude:number, longitude:number):flatbuffers.Offset {
  Location.startLocation(builder);
  Location.addLatitude(builder, latitude);
  Location.addLongitude(builder, longitude);
  return Location.endLocation(builder);
}

unpack(): LocationT {
  return new LocationT(
    this.latitude(),
    this.longitude()
  );
}


unpackTo(_o: LocationT): void {
  _o.latitude = this.latitude();
  _o.longitude = this.longitude();
}
}

export class LocationT implements flatbuffers.IGeneratedObject {
constructor(
  public latitude: number = 0.0,
  public longitude: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Location.createLocation(builder,
    this.latitude,
    this.longitude
  );
}
}
